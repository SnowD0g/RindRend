exit
Book.count
Book.all.size
Book.all
reload1
Book.size
book.exists?
book.marked_for_destruction?
book.marked_for_deletion?
book.persisted?
exit
book.reload
book
book.destroyed?
book
exit
json
continue
exit
json[:data][:attributes][:title]
json[:data][:attributes]
json[:data]
json
exit
y
quit
params
exit
params[:book]
params
exit
params
exit
next
exit
exception.message
exception.record
exception
exception.record
exit
exception.record.errors.full_messages
exit
exception.record.errors.full_messages
exception.record.errors.full_messages.flatten.to_s
exception.record.errors.full_messages.flatten.class
exception.record.errors.full_messages.flatten
exception.record.errors.full_messages.to_s
exception.record.errors.full_messages
exception.record.errors.full_messages.class
exception.record.errors.values
exception.record.errors.full_messages.class
exception.record.errors.full_messages
exception.record.errors.full_messages.to_s
exception.record.errors.full_messages.to_S
exception.record.errors.full_messages
exception.record.errors.generate_message
exception.record.errors
exception.record.errors.to_s
exception.record.errors.to_S
exception.record.errors
exception.record.errors.messages.to_s
exception.record.errors.messages
exception.record.errors.to_s
exception.record.errors.messages
exception.record.errors
exception.record
exception.class
exception
exit
request
object_id
object
continue
quit
response.location
quit
response.location
exit
json[:data][2]
json[:data][1]
json[:data][0]
json[:data]
json[:data][:id]
json[:data].size
Book.all.size, json[:data].size
json = json(response.body)
Book.all.size
Book.all
exit
Book.all.size
json[:data].size
json[:data]
json = json(response.body)
exit
book
json[:data][:id]
json[:data].is_a? Hash
json[:data].class
json[:data].type?
json[:data].type
json[:data].size
json
exit
json[:data].size
json[:data]
json
exit
json[:data]
json
exit
json['data']
json[:data]
json
